



void skip_to_next_level(std::pair<pointer, int> current)
{
	static int last_level = -1;
	if (last_level == current.second)
		std::cout << " ";
	if ((last_level != current.second) && current.first->_parent)
		std::cout << std::endl;
	last_level = current.second;
}



// void breadthFirstTraversal(){
// 	std::deque<std::pair<pointer, int> > queue;
// 	queue.push_back(std::make_pair(_root, 0));
// 	while (!queue.empty())
// 	{
// 		std::pair<pointer, int> current = queue.front();
// 		queue.pop_front();
// 		skip_to_next_level(current);
// 		std::cout << ((current.first->_black) ? BLACK : RED) << current.first->_value;
// 		if (current.first->_parent)
// 			std::cout << '(' << current.first->_parent->_value << ')' << " ";
// 		if (current.first->_left)
// 			queue.push_back(std::make_pair(current.first->_left, (current.second + 1)));
// 		if (current.first->_right)
// 			queue.push_back(std::make_pair(current.first->_right, (current.second + 1)));
// 	}
// }